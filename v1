#include <cs50.h>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stddef.h>
#define UPPER 65
#define LOWER 97
#define ALPHABET 26
#define BETA 25

int main(int argc, string argv[1])
{
    if (argc > 2 || argc < 2 )

        {
            printf("You have not provided a valid cipher in alphabets\n");
            return 1;

        }
 string cipher = argv[1];
int cipher_length = strlen(cipher);


//cipher validation
for (int i=0; i < cipher_length ; i++)
    {


        if (!isalpha(cipher[i]))

        {
            printf("You have not provided a valid cipher in alphabets\n");
            return 1;

        }

        }

//Processing the cipher to index values

int created[cipher_length];

    for (int t=0; t<cipher_length ; t++)
    {
        if (isupper(cipher[t]))
        {
            char s = cipher[t];
            int d = (int)s - UPPER;
            created[t]= d;

        }
        else  if (islower(cipher[t]))
        {
            char m = cipher[t];
            int n = (int) m - LOWER;
           created[t] = n;
        }
    }


         //Use get string to get the words

            string plain_text = get_string("plaintext: ");
            printf( "ciphertext: ");


        //enciphering
            int j = strlen(plain_text);
            int k=0;


                for (int m=0 ; m< j; m++)
                    {
                        int z = k%cipher_length;

                        if (!isalpha(plain_text[m]))
                        {
                            printf("%c", plain_text[m]);

                        }


                   else if (isupper(plain_text[m]))
                        {
                            k++;
                            char s = plain_text[m];
                            char alphabet_index = s - UPPER;
                            char c = (alphabet_index + (created[z]));
                            int e = (int)c%26;
                            int string_encrypted = e + UPPER;
                            char output = (char)string_encrypted;
                            printf("%c", output);

                        }
                    else if (islower(plain_text[m]))
                        {
                            k++;
                            char q = plain_text[m];
                            char alphabet_indx = q - LOWER;
                            char o = (alphabet_indx + (created[z]));
                            int p=(int)o%26;
                            int string_encrypted = p + LOWER;
                            char outpt = (char)string_encrypted;
                            printf("%c", outpt);
                        }

                    }



printf("\n");
return 0;




        }
